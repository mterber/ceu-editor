grammar org.xtext.ceu.Ceu with org.eclipse.xtext.common.Terminals

generate ceu "http://www.xtext.org/ceu/Ceu"

Root:
	__Exp;

__Exp:
	__0;

__0 returns __Exp:
	__1 '..'?;

__1 returns __Exp:
	__2 ({BinaryOperation.operandLeft=current} operator='or' operandRight=__2)*;

__2 returns __Exp:
	__3 ({OperationBinary.operandLeft=current} operator='and' operandRight=__3)*;

__3 returns __Exp:
	__4 ({OperationBinary.operandLeft=current} operator=('!=' | '==' | '<=' | '>=' | '<' | '>') operandRight=__4)*;

__4 returns __Exp:
	__5 ({OperationBinary.operandLeft=current} operator='|' operandRight=__5)*;

__5 returns __Exp:
	__6 ({OperationBinary.operandLeft=current} operator='^' operandRight=__6)*;

__6 returns __Exp:
	__7 ({OperationBinary.operandLeft=current} operator='&' operandRight=__7)*;

__7 returns __Exp:
	__8 ({OperationBinary.operandLeft=current} operator=('>>' | '<<') operandRight=__8)*;

__8 returns __Exp:
	__9 ({OperationBinary.operandLeft=current} operator=('+' | '-') operandRight=__9)*;

__9 returns __Exp:
	__10 ({OperationBinary.operandLeft=current} operator=('*' | '/' | '%') operandRight=__10)*;

__10 returns __Exp:
	( {OperationUnary} ( operators+=('not' | '-' | '+' | '~' | '*' | '&&' | '&' | '$$' | '$') | ('(' cast+=__Cast ')') )+ operand=__11 ) |
	__11;

__11 returns __Exp:
	__12
	( 
		( '(' (expList+=ExpList)? ')' ('finalize' 'with' finally+=Finally 'end')? ) |
		( '[' exps+=__Exp ']' ) |
		( (':' | '.') __ID_FIELD ) |
		'?' | '!'
	)*
;
__12:
	val=INT//__Prim
;


__Cast returns __Exp:
	Type | {Annotation} name=('@nohold' | '@plain' | '@pure');

Type:
	__ID_Type ('&&' | '&' | '?' | ('[' (exp+=__Exp)? ']'))*;

__ID_Type returns Type:
	name=(TYPES | __ID_NAT | __ID_CLS_ADT);

ExpList returns __Exp:
	__Exp ({ExpList.first=current}',' next=__Exp)*
;

Finally:
	val=INT//Block
;

terminal TYPES:
	'bool' | 'byte' | 'char' | 'f32' | 'f64' | 'float' | 'int' | 's16' | 's32' | 's64' | 's8' | 'u16' | 'u32' | 'u64' |
	'u8' | 'uint' | 'void' | 'word';
	
terminal __ID_VAR:
	'a'..'z' ALPHANUM*;

terminal __ID_EXT_TAG:
	'A'..'Z' ALPHANUM_L*;

terminal __ID_CLS_ADT:
	'A'..'Z' ALPHANUM*;

terminal __ID_NAT:
	'_' ALPHANUM+;

terminal __ID_FIELD:
	ALPHA ALPHANUM*;

terminal fragment ALPHA: // Alpha
	'a'..'z' | '_' | 'A'..'Z';

terminal fragment ALPHANUM: // Alphanum
	ALPHA | '0'..'9';

terminal fragment ALPHANUM_L: // ALPHANUM
	'A'..'Z' | '_' | '0'..'9';

terminal fragment ALPHANUM_S: // alphanum
	'a'..'z' | '_' | '0'..'9';
/*

__Prim:
	( '(' __Exp ')' )  |
	SIZEOF | Var |	Nat | NULL | NUMBER | STRING | Global |
	This | Outer | RawExp | Vector_constr |
	('call' __Exp) |
	('call/rec' __Exp)
;





Ext:
	__ID_EXT_TAG;

Var:
	__ID_VAR;

Nat:
	__ID_NAT;




*/